"use client";

/**
 * Rewards - vers√£o integrada ao backend
 * - Busca pontos reais:   GET /api/pontos
 * - Busca brindes (TXT):  GET /api/rewards?grouped=1
 *   (use /api/rewards sem o query param para 1 linha = 1 item)
 * - Categorias geradas dinamicamente a partir dos dados
 * - Fallback de imagem para /logos/Simplifique.png
 */

import React, { useEffect, useMemo, useState } from "react";
import { useRouter } from "next/navigation";
import { api } from "@/lib/api";

// ==== Tipagens ====
interface Reward {
  id: number;
  name: string;
  description: string;
  details: string;
  pointsCost: number;
  imageUrl: string;
  category: string;
  stock: number;
  sizes?: string[];
}

interface CartItem extends Reward {
  key: string;
  selectedSize?: string;
  quantity: number;
}

export default function RewardsPage(): React.ReactElement {
  const router = useRouter();

  // ==== Estados base ====
  const [userPoints, setUserPoints] = useState<number | null>(null);
  const [rewards, setRewards] = useState<Reward[]>([]);
  const [loading, setLoading] = useState<boolean>(true);

  // ==== Estados de UI ====
  const [search, setSearch] = useState<string>("");
  const [category, setCategory] = useState<string>("Todas");
  const [sort, setSort] = useState<"asc" | "desc">("asc");

  const [detailOpen, setDetailOpen] = useState<boolean>(false);
  const [selected, setSelected] = useState<Reward | null>(null);
  const [selectedSize, setSelectedSize] = useState<string>("");

  const [cartOpen, setCartOpen] = useState<boolean>(false);
  const [cart, setCart] = useState<CartItem[]>([]);
  const [addingKey, setAddingKey] = useState<string | null>(null);

  const [notification, setNotification] = useState<string>("");

  // ==== Buscar pontos reais (mant√©m seu padr√£o atual) ====
  useEffect(() => {
    api
      .get("/api/pontos")
      .then((res) => {
        // ajuste aqui se o nome do campo for outro:
        setUserPoints(res.data.saldo_atual);
      })
      .catch(() => {
        router.replace("/login");
      });
  }, [router]);

  // ==== Buscar cat√°logo do TXT via backend (substitui o mock) ====
  useEffect(() => {
    let mounted = true;
    setLoading(true);

    // Use "?grouped=1" para consolidar varia√ß√µes de tamanho (P/M/G/GG).
    // Se preferir cada linha do CSV como um item, remova o "?grouped=1".
    api
      .get<Reward[]>("/api/rewards?grouped=1")
      .then((res) => {
        if (!mounted) return;
        const data = Array.isArray(res.data) ? res.data : [];

        // Normaliza√ß√£o m√≠nima e fallback de imagem
        const normalized = data.map((r) => ({
          ...r,
          imageUrl:
            r.imageUrl && r.imageUrl.trim() !== ""
              ? r.imageUrl
              : "/logos/Simplifique.png",
          stock: typeof r.stock === "number" ? r.stock : 0,
        }));

        setRewards(normalized);
      })
      .catch((err) => {
        console.error("Erro ao buscar rewards:", err);
        setNotification("N√£o foi poss√≠vel carregar os brindes. Tente novamente.");
      })
      .finally(() => mounted && setLoading(false));

    return () => {
      mounted = false;
    };
  }, []);

  // ==== Categorias din√¢micas (a partir do TXT) ====
  const categories = useMemo(() => {
    const set = new Set<string>();
    rewards.forEach((r) => set.add(r.category || "Outros"));
    // "Todas" sempre primeiro, restante ordenado alfabeticamente
    return ["Todas", ...Array.from(set).sort((a, b) => a.localeCompare(b, "pt-BR"))];
  }, [rewards]);

  // ==== Filtro + Ordena√ß√£o ====
  const filtered = useMemo(() => {
    const term = search.trim().toLowerCase();
    const list = rewards.filter(
      (r) =>
        (category === "Todas" || r.category === category) &&
        (r.name.toLowerCase().includes(term) ||
          r.description.toLowerCase().includes(term))
    );
    return list.sort((a, b) =>
      sort === "asc" ? a.pointsCost - b.pointsCost : b.pointsCost - a.pointsCost
    );
  }, [rewards, category, search, sort]);

  // ==== Totais do carrinho ====
  const totalItems = useMemo(
    () => cart.reduce((sum, i) => sum + i.quantity, 0),
    [cart]
  );
  const totalCartPts = useMemo(
    () => cart.reduce((sum, i) => sum + i.pointsCost * i.quantity, 0),
    [cart]
  );

  // ==== Notifica√ß√£o ====
  function showNotification(msg: string) {
    setNotification(msg);
    setTimeout(() => setNotification(""), 3000);
  }

  // ==== Carrinho ====
  function addToCart(item: Reward, size?: string) {
    if (userPoints == null) return;

    const key = `${item.id}_${size ?? ""}`;
    setAddingKey(key);

    // Simula processamento r√°pido (anima√ß√£o)
    setTimeout(() => {
      setCart((prev) => {
        const exist = prev.find((i) => i.key === key);
        if (exist) {
          // s√≥ incrementa se n√£o estourar pontos
          if ((userPoints ?? 0) >= exist.pointsCost * (exist.quantity + 1)) {
            return prev.map((i) =>
              i.key === key ? { ...i, quantity: i.quantity + 1 } : i
            );
          }
          showNotification("‚ùå Pontos insuficientes para adicionar mais unidade(s).");
          return prev;
        }
        return [...prev, { ...item, quantity: 1, selectedSize: size, key }];
      });
      setAddingKey(null);
    }, 400);
  }

  function removeFromCart(key: string) {
    setCart((prev) =>
      prev
        .map((i) =>
          i.key === key ? { ...i, quantity: Math.max(i.quantity - 1, 0) } : i
        )
        .filter((i) => i.quantity > 0)
    );
  }

  function checkout() {
    if (!window.confirm(`Confirmar resgate de ${totalCartPts} pts?`)) return;
    if (userPoints !== null && userPoints >= totalCartPts) {
      setUserPoints((p) => (p ?? 0) - totalCartPts);
      setCart([]);
      setCartOpen(false);
      showNotification("‚úÖ Seu pedido entrou em processamento");
      // TODO: aqui depois voc√™ chama o backend para criar o pedido/movimenta√ß√£o
    } else {
      showNotification("‚ùå Pontos insuficientes");
    }
  }

  // ==== UI ====
  return (
    <div className="min-h-screen bg-[#ededed] text-[#00205b]">
      {/* HEADER */}
      <header className="bg-[#00205b] text-white shadow-md">
        <div className="max-w-6xl mx-auto flex flex-col md:flex-row items-center justify-between gap-4 px-4 py-6">
          {/* back + t√≠tulo */}
          <div className="flex items-center gap-4">
            <button onClick={() => router.back()} className="text-2xl hover:opacity-80">
              ‚Üê
            </button>
            <h1 className="text-2xl font-bold">Loja de Brindes</h1>
          </div>

          {/* busca + ordena√ß√£o */}
          <div className="flex flex-1 items-center gap-4">
            <input
              type="text"
              placeholder="Buscar brinde..."
              value={search}
              onChange={(e) => setSearch(e.target.value)}
              className="flex-1 px-4 py-2 rounded-lg border border-gray-300 text-[#00205b] focus:ring-2 focus:ring-[#41b6e6] bg-white"
            />
            <select
              value={sort}
              onChange={(e) => setSort(e.target.value as "asc" | "desc")}
              className="px-3 py-2 rounded-lg bg-white text-[#00205b] border border-gray-300 focus:ring-2 focus:ring-[#41b6e6]"
            >
              <option value="asc">Menor custo</option>
              <option value="desc">Maior custo</option>
            </select>
          </div>

          {/* pontos + carrinho */}
          <div className="flex items-center gap-4">
            {userPoints == null ? (
              <div className="h-6 w-24 bg-[#c6d6e3] animate-pulse rounded" />
            ) : (
              <div className="px-3 py-2 bg-white text-[#00205b] rounded-lg font-medium">
                üéØ {userPoints} pts
              </div>
            )}
            <button
              onClick={() => setCartOpen(true)}
              className="relative px-3 py-2 bg-white text-[#00205b] rounded-lg hover:bg-[#f0f0f0] transition"
            >
              üõí
              {totalItems > 0 && (
                <span className="absolute -top-1 -right-1 bg-red text-white text-xs w-5 h-5 flex items-center justify-center rounded-full">
                  {totalItems}
                </span>
              )}
            </button>
          </div>
        </div>

        {/* filtros de categorias */}
        <nav className="bg-[#ededed]">
          <div className="max-w-6xl mx-auto px-4 overflow-x-auto">
            <ul className="flex gap-3 py-3 whitespace-nowrap">
              {categories.map((cat) => (
                <li key={cat}>
                  <button
                    onClick={() => setCategory(cat)}
                    className={`px-4 py-2 rounded-full text-sm transition ${
                      category === cat
                        ? "bg-[#41b6e6] text-white"
                        : "bg-[#c8c9c7] text-[#00205b] hover:bg-[#b7ce95]"
                    }`}
                  >
                    {cat}
                  </button>
                </li>
              ))}
            </ul>
          </div>
        </nav>
      </header>

      {/* GALERIA */}
      <main className="max-w-6xl mx-auto px-4 py-10">
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8">
          {(loading ? Array(8).fill(null) : filtered).map((item, idx) => {
            if (loading) {
              return (
                <div
                  key={idx}
                  className="h-96 bg-[#c6d6e3] rounded-xl animate-pulse"
                />
              );
            }

            const affordable = (userPoints ?? 0) >= item.pointsCost;
            const firstSize = item.sizes?.[0] ?? "";
            const key = `${item.id}_${firstSize}`;

            return (
              <div
                key={item.id}
                onClick={() => {
                  setSelected(item);
                  setDetailOpen(true);
                  setSelectedSize(firstSize);
                }}
                className="group bg-white rounded-xl shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition cursor-pointer overflow-hidden"
              >
                {/* imagem */}
                <div className="p-4">
                  <div className="relative h-40 bg-[#f9f9f9] rounded-lg flex items-center justify-center">
                    <img
                      src={item.imageUrl || "/logos/Simplifique.png"}
                      alt={item.name}
                      className="max-h-full max-w-full object-contain"
                      onError={(e) => {
                        (e.currentTarget as HTMLImageElement).src =
                          "/logos/Simplifique.png";
                      }}
                    />
                  </div>
                </div>

                {/* texto e a√ß√µes */}
                <div className="px-4 pb-4 flex flex-col h-full">
                  <h2 className="text-lg font-semibold">{item.name}</h2>
                  <p className="text-sm text-[#75787b] flex-1 mt-2">
                    {item.description}
                  </p>

                  <div className="mt-2 flex justify-between items-center">
                    <span className="text-xl font-bold text-[#1e2a63]">
                      {item.pointsCost} pts
                    </span>
                    <span className="text-sm text-[#75787b]">
                      Estoque: {item.stock}
                    </span>
                  </div>

                  <div className="mt-4 flex items-center justify-between">
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        addToCart(item, firstSize);
                      }}
                      disabled={!affordable || addingKey === key}
                      className={`px-3 py-1 rounded-lg font-semibold transition ${
                        affordable
                          ? "bg-[#41b6e6] text-white hover:bg-[#33a1d1]"
                          : "bg-[#c8c9c7] text-[#75787b] cursor-not-allowed"
                      }`}
                    >
                      {addingKey === key ? "Adicionando..." : "+ Carrinho"}
                    </button>
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      </main>

      {/* DRAWER ‚Äî Detalhe */}
      {detailOpen && selected && (
        <div className="fixed inset-0 z-50 flex">
          <div
            className="absolute inset-0 bg-black/50"
            onClick={() => setDetailOpen(false)}
          />
          <aside className="relative ml-auto bg-white w-full max-w-md h-full p-6 shadow-2xl flex flex-col">
            <button
              onClick={() => setDetailOpen(false)}
              className="self-end mb-4 text-xl"
              aria-label="Fechar"
              title="Fechar"
            >
              ‚úñ
            </button>

            <img
              src={selected.imageUrl || "/logos/Simplifique.png"}
              alt={selected.name}
              className="w-full h-48 object-cover rounded-lg"
              onError={(e) => {
                (e.currentTarget as HTMLImageElement).src =
                  "/logos/Simplifique.png";
              }}
            />

            <h2 className="mt-4 text-2xl font-semibold">{selected.name}</h2>
            <p className="mt-2 text-[#75787b]">
              {selected.details || selected.description}
            </p>

            {selected.sizes && (
              <div className="mt-4">
                <label className="block text-sm font-medium mb-1">Tamanho:</label>
                <select
                  value={selectedSize}
                  onChange={(e) => setSelectedSize(e.target.value)}
                  className="w-full px-3 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-[#41b6e6]"
                >
                  {selected.sizes.map((sz) => (
                    <option key={sz} value={sz}>
                      {sz}
                    </option>
                  ))}
                </select>
              </div>
            )}

            <div className="mt-auto">
              <div className="flex items-center justify-between mb-4">
                <span className="text-2xl font-bold text-[#1e2a63]">
                  {selected.pointsCost} pts
                </span>
                <button
                  onClick={() =>
                    addToCart(selected, selected.sizes ? selectedSize : undefined)
                  }
                  disabled={
                    addingKey === `${selected.id}_${selectedSize ?? ""}`
                  }
                  className="px-4 py-2 bg-[#41b6e6] text-white rounded-lg hover:bg-[#33a1d1] transition"
                >
                  {addingKey === `${selected.id}_${selectedSize ?? ""}`
                    ? "Adicionando..."
                    : "+ Adicionar"}
                </button>
              </div>
              <button
                onClick={() => setDetailOpen(false)}
                className="w-full py-2 text-center rounded-lg border border-gray-300"
              >
                Voltar
              </button>
            </div>
          </aside>
        </div>
      )}

      {/* DRAWER ‚Äî Carrinho */}
      {cartOpen && (
        <div className="fixed inset-0 z-40 flex">
          <div
            className="absolute inset-0 bg-black/50"
            onClick={() => setCartOpen(false)}
          />
          <aside className="relative ml-auto bg-white w-full max-w-sm h-full p-6 shadow-2xl flex flex-col">
            <button
              onClick={() => setCartOpen(false)}
              className="self-end mb-4 text-xl"
              aria-label="Fechar carrinho"
              title="Fechar"
            >
              ‚úñ
            </button>

            <h2 className="text-2xl font-semibold mb-4">Carrinho</h2>

            <div className="flex-1 overflow-auto space-y-4">
              {cart.length === 0 && (
                <p className="text-gray-500">Carrinho vazio</p>
              )}

              {cart.map((item) => (
                <div key={item.key} className="flex items-center gap-3">
                  <img
                    src={item.imageUrl || "/logos/Simplifique.png"}
                    alt={item.name}
                    className="w-16 h-16 object-cover rounded-lg"
                    onError={(e) => {
                      (e.currentTarget as HTMLImageElement).src =
                        "/logos/Simplifique.png";
                    }}
                  />
                  <div className="flex-1">
                    <p className="font-medium">{item.name}</p>
                    {item.selectedSize && (
                      <p className="text-sm text-[#75787b]">
                        Tamanho: {item.selectedSize}
                      </p>
                    )}
                    <p className="text-sm text-[#75787b]">
                      {item.pointsCost} pts √ó {item.quantity}
                    </p>
                  </div>
                  <div className="flex items-center gap-1">
                    <button
                      onClick={() => removeFromCart(item.key)}
                      className="p-1 hover:bg-gray-100 rounded"
                      aria-label="Diminuir"
                      title="Diminuir"
                    >
                      ‚Äì
                    </button>
                    <button
                      onClick={() => addToCart(item, item.selectedSize)}
                      className="p-1 hover:bg-gray-100 rounded"
                      aria-label="Aumentar"
                      title="Aumentar"
                    >
                      +
                    </button>
                  </div>
                </div>
              ))}
            </div>

            <div className="mt-6">
              <p className="flex justify-between font-semibold">
                Total: <span>{totalCartPts} pts</span>
              </p>
              <button
                onClick={checkout}
                disabled={userPoints == null || userPoints < totalCartPts}
                className={`w-full mt-4 py-3 rounded-lg text-white font-semibold transition ${
                  userPoints != null && userPoints >= totalCartPts
                    ? "bg-[#43b02a] hover:opacity-90"
                    : "bg-[#c8c9c7] cursor-not-allowed text-[#75787b]"
                }`}
              >
                Finalizar Resgate
              </button>
            </div>
          </aside>
        </div>
      )}

      {/* Notifica√ß√£o centralizada */}
      {notification && (
        <div className="fixed inset-0 z-50 flex items-center justify-center pointer-events-none">
          <div className="bg-white px-6 py-4 shadow-lg rounded-full flex items-center gap-2">
            <span className="text-2xl">üîî</span>
            <span>{notification}</span>
          </div>
        </div>
      )}
    </div>
  );
}